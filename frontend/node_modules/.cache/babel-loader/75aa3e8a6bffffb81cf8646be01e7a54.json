{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\react\\\\create-react-app\\\\functional component hook example\\\\src\\\\index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals'; // counter \n\nfunction Counter() {\n  _s();\n\n  let [count, setCounter] = useState(1);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add\",\n      onClick: () => {\n        setCounter(count++);\n      },\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"delete\",\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n} // Refresh time on click of button\n\n\n_s(Counter, \"hPkjDDdewBwIgN2u6W8AA+0SuPk=\");\n\n_c = Counter;\n\nfunction Currenttime() {\n  _s2();\n\n  let oldtime = new Date().toLocaleTimeString();\n  const [gettime, settime] = useState(oldtime);\n  console.log(gettime, oldtime);\n\n  const updateTime = () => {\n    let update = new Date().toLocaleTimeString();\n    settime(update);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [gettime, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button-time\",\n      onClick: updateTime,\n      children: \" Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n} // Digital clock\n\n\n_s2(Currenttime, \"IfWZqAS1vDlJ70uMvUEdnpV47jk=\");\n\n_c2 = Currenttime;\n\nfunction DigitalClock() {\n  _s3();\n\n  let oldtime = new Date().toLocaleTimeString();\n  const [gettime, settime] = useState(oldtime);\n  console.log(DigitalClock);\n\n  const updateTime = () => {\n    let update = new Date().toLocaleTimeString();\n    settime(update);\n  };\n\n  setInterval(function () {\n    updateTime();\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Digital CLock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), gettime]\n  }, void 0, true);\n}\n\n_s3(DigitalClock, \"IfWZqAS1vDlJ70uMvUEdnpV47jk=\");\n\n_c3 = DigitalClock;\nReactDOM.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(Currenttime, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(DigitalClock, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 1\n  }, this)]\n}, void 0, true), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Counter\");\n$RefreshReg$(_c2, \"Currenttime\");\n$RefreshReg$(_c3, \"DigitalClock\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/react/create-react-app/functional component hook example/src/index.js"],"names":["React","useState","ReactDOM","App","reportWebVitals","Counter","count","setCounter","Currenttime","oldtime","Date","toLocaleTimeString","gettime","settime","console","log","updateTime","update","DigitalClock","setInterval","render","document","getElementById"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CAEA;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,MAAI,CAACC,KAAD,EAAQC,UAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAhC;AAIA,sBAAQ;AAAA,4BAET;AAAA,gBAAKK;AAAL;AAAA;AAAA;AAAA;AAAA,YAFS,eAIT;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAwB,MAAA,OAAO,EAAE,MAAI;AAACC,QAAAA,UAAU,CAACD,KAAK,EAAN,CAAV;AAAoB,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJS,eAKR;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALQ;AAAA,kBAAR;AAQD,C,CAED;;;GAfSD,O;;KAAAA,O;;AAiBT,SAASG,WAAT,GAAsB;AAAA;;AACpB,MAAIC,OAAO,GAAC,IAAIC,IAAJ,GAAWC,kBAAX,EAAZ;AAEA,QAAM,CAACC,OAAD,EAASC,OAAT,IAAmBZ,QAAQ,CAACQ,OAAD,CAAjC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAoBH,OAApB;;AAEA,QAAMO,UAAU,GAAC,MAAI;AACnB,QAAIC,MAAM,GAAC,IAAIP,IAAJ,GAAWC,kBAAX,EAAX;AACAE,IAAAA,OAAO,CAACI,MAAD,CAAP;AACD,GAHD;;AAIA,sBAAQ;AAAA,eAAGL,OAAH,eACR;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAgC,MAAA,OAAO,EAAEI,UAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADQ;AAAA,kBAAR;AAGD,C,CAED;;;IAfSR,W;;MAAAA,W;;AAiBT,SAASU,YAAT,GAAuB;AAAA;;AACrB,MAAIT,OAAO,GAAC,IAAIC,IAAJ,GAAWC,kBAAX,EAAZ;AAEA,QAAM,CAACC,OAAD,EAASC,OAAT,IAAmBZ,QAAQ,CAACQ,OAAD,CAAjC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYG,YAAZ;;AAEA,QAAMF,UAAU,GAAC,MAAI;AACnB,QAAIC,MAAM,GAAC,IAAIP,IAAJ,GAAWC,kBAAX,EAAX;AACAE,IAAAA,OAAO,CAACI,MAAD,CAAP;AACD,GAHD;;AAKAE,EAAAA,WAAW,CAAC,YAAU;AAACH,IAAAA,UAAU;AAAI,GAA1B,EAA2B,IAA3B,CAAX;AACA,sBAAQ;AAAA,4BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAF,EAA0BJ,OAA1B;AAAA,kBAAR;AAGD;;IAfQM,Y;;MAAAA,Y;AAmBThB,QAAQ,CAACkB,MAAT,eACC;AAAA,0BAEC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAFD,eAIC,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,UAJD,eAKD,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,UALC;AAAA,gBADD,EAUGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAVH,E,CAcA;AACA;AACA;;AACAlB,eAAe","sourcesContent":["import React , {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// counter \n\nfunction Counter (){\n  let [count, setCounter]=useState(1);\n\n\n\n  return (<>\n  \n <h1>{count}</h1>\n \n <button className=\"add\" onClick={()=>{setCounter(count++)}}>Add</button>\n  <button className=\"delete\">Delete</button> \n  </>\n  );\n}\n\n// Refresh time on click of button\n\nfunction Currenttime(){\n  let oldtime=new Date().toLocaleTimeString();\n\n  const [gettime,settime]= useState(oldtime);\n  console.log(gettime,oldtime)\n\n  const updateTime=()=>{\n    let update=new Date().toLocaleTimeString();\n    settime(update);\n  }\n  return (<>{gettime}\n  <button className=\"button-time\" onClick={updateTime} > Refresh</button>\n  </>);\n}\n\n// Digital clock\n\nfunction DigitalClock(){\n  let oldtime=new Date().toLocaleTimeString();\n\n  const [gettime,settime]= useState(oldtime);\n  console.log(DigitalClock)\n\n  const updateTime=()=>{\n    let update=new Date().toLocaleTimeString();\n    settime(update);\n  }\n \n  setInterval(function(){updateTime();},1000);\n  return (<><h1> Digital CLock</h1>{gettime}\n  \n  </>);\n}\n\n\n\nReactDOM.render(\n <>\n  \n  <Counter/>\n\n  <Currenttime/>\n<DigitalClock/>\n  \n  \n  </>\n  ,document.getElementById('root')\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}